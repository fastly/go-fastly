// Code generated by 'service_linked_product' generator, DO NOT EDIT.

package ddos_protection

import (
	"errors"

	fastly "github.com/fastly/go-fastly/v9/fastly"
)

// Get gets the status of the DDoS Protection product on the service.
func Get(c *fastly.Client, serviceID string) (*fastly.ProductEnablement, error) {
	var err error
	if serviceID == "" {
		return nil, fastly.ErrMissingServiceID
	}

	path := fastly.ToSafeURL("enabled-products", "v1", "ddos_protection", "services", serviceID)

	resp, err := c.Get(path, nil)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var h *fastly.ProductEnablement
	if err = fastly.DecodeBodyMap(resp.Body, &h); err != nil {
		return nil, err
	}
	return h, nil
}

// Enable enables the DDoS Protection product on the service.
func Enable(c *fastly.Client, serviceID string) (*fastly.ProductEnablement, error) {
	var err error
	if serviceID == "" {
		return nil, fastly.ErrMissingServiceID
	}

	path := fastly.ToSafeURL("enabled-products", "v1", "ddos_protection", "services", serviceID)

	resp, err := c.Put(path, nil)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var h *fastly.ProductEnablement
	if err = fastly.DecodeBodyMap(resp.Body, &h); err != nil {
		return nil, err
	}
	return h, nil
}

// Disable disables the DDoS Protection product on the service.
func Disable(c *fastly.Client, serviceID string) error {
	var err error
	if serviceID == "" {
		return fastly.ErrMissingServiceID
	}

	path := fastly.ToSafeURL("enabled-products", "v1", "ddos_protection", "services", serviceID)

	resp, err := c.Delete(path, nil)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}

// GetConfiguration gets the configuration of the DDoS Protection product on the service.
func GetConfiguration(c *fastly.Client, serviceID string) (*ConfigureOutput, error) {
	var err error
	if serviceID == "" {
		return nil, fastly.ErrMissingServiceID
	}

	path := fastly.ToSafeURL("enabled-products", "v1", "ddos_protection", "services", serviceID, "configuration")

	resp, err := c.Get(path, nil)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var h *ConfigureOutput
	if err = fastly.DecodeBodyMap(resp.Body, &h); err != nil {
		return nil, err
	}
	return h, nil
}

// UpdateConfiguration updates the configuration of the DDoS Protection product on the service.
func UpdateConfiguration(c *fastly.Client, serviceID string, i *ConfigureInput) (*ConfigureOutput, error) {
	var err error
	var pendingErrors []error
	if serviceID == "" {
		pendingErrors = append(pendingErrors, fastly.ErrMissingServiceID)
	}
	if err = i.Validate(); err != nil {
		pendingErrors = append(pendingErrors, err)
	}
	switch len(pendingErrors) {
	case 0:
	case 1:
		return nil, pendingErrors[0]
	default:
		return nil, errors.Join(pendingErrors...)
	}

	path := fastly.ToSafeURL("enabled-products", "v1", "ddos_protection", "services", serviceID, "configuration")

	resp, err := c.PatchJSON(path, i, nil)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var h *ConfigureOutput
	if err = fastly.DecodeBodyMap(resp.Body, &h); err != nil {
		return nil, err
	}
	return h, nil
}
