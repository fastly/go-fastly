// Code generated by 'service_product_enablement' generator, DO NOT EDIT.

package fastly

import tmpl "github.com/fastly/go-fastly/v9/internal/templates/product_ngwaf"

// GetProductNextGenWAF gets the status of the NextGenWAF product on the service.
func (c *Client) GetProductNextGenWAF(serviceID string) (*ProductEnablement, error) {
	if serviceID == "" {
		return nil, ErrMissingServiceID
	}

	path := ToSafeURL("enabled-products", tmpl.ProductID, "services", serviceID)

	resp, err := c.Get(path, nil)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var h *ProductEnablement
	if err := decodeBodyMap(resp.Body, &h); err != nil {
		return nil, err
	}
	return h, nil
}

type EnableProductNextGenWAFInput = tmpl.EnableInput

// EnableProductNextGenWAF enables the NextGenWAF product on the service.
func (c *Client) EnableProductNextGenWAF(serviceID string, i *EnableProductNextGenWAFInput) (*ProductEnablement, error) {
	if serviceID == "" {
		return nil, ErrMissingServiceID
	}
	if err := i.Validate(); err != nil {
		return nil, err
	}

	path := ToSafeURL("enabled-products", tmpl.ProductID, "services", serviceID)

	resp, err := c.PutJSON(path, i, nil)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var h *ProductEnablement
	if err := decodeBodyMap(resp.Body, &h); err != nil {
		return nil, err
	}
	return h, nil
}

// DisableProductNextGenWAF disables the NextGenWAF product on the service.
func (c *Client) DisableProductNextGenWAF(serviceID string) error {
	if serviceID == "" {
		return ErrMissingServiceID
	}

	path := ToSafeURL("enabled-products", tmpl.ProductID, "services", serviceID)

	resp, err := c.Delete(path, nil)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}
