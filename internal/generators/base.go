package generators

import (
	"fmt"
	. "github.com/dave/jennifer/jen"
	"golang.org/x/tools/go/packages"
	"os"
)

const FastlyPackagePath = "github.com/fastly/go-fastly/v9/fastly"

var ClientParameter = Id("c").Op("*").Qual(FastlyPackagePath, "Client")

type Generator struct {
	ThisGenerator string
	Package       *packages.Package
}

func Setup(generatorName string) (*Generator, error) {
	g := Generator{}

	g.ThisGenerator = generatorName

	packageName := os.Getenv("GOPACKAGE")

	cfg := &packages.Config{Mode: packages.NeedTypes | packages.NeedName}
	pkgs, err := packages.Load(cfg, ".")
	if err != nil {
		return nil, fmt.Errorf("loading template for inspection: %w", err)
	}

	if packages.PrintErrors(pkgs) > 0 {
		os.Exit(1)
	}

	for i, pkg := range pkgs {
		if pkg.Name == packageName {
			g.Package = pkgs[i]
		}
	}

	if g.Package == nil {
		return nil, fmt.Errorf("failure loading package '%s' from the template", packageName)
	}

	return &g, nil
}

func (g *Generator) Header(f *File) {
	f.HeaderComment("Code generated by '" + g.ThisGenerator + "' generator, DO NOT EDIT.")
}
