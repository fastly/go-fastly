package generators

import (
	"fmt"
	. "github.com/dave/jennifer/jen"
	"golang.org/x/tools/go/packages"
	"os"
	"path/filepath"
)

const packagePathBase = "github.com/fastly/go-fastly/v9"

var ClientReceiver = Params(Id("c").Op("*").Qual("fastly", "Client"))

// get package, and template file, load template and get packages

type Generator struct {
	ThisGenerator string
	PackageName   string
	PackagePath   string
	Package       *packages.Package
	ProductName   string
}

func Setup(generatorName string) (*Generator, error) {
	g := Generator{}

	g.ThisGenerator = generatorName

	g.PackageName = os.Getenv("GOPACKAGE")
	g.PackagePath = filepath.Join(packagePathBase, "internal", "templates", g.PackageName)

	cfg := &packages.Config{Mode: packages.NeedTypes}
	pkgs, err := packages.Load(cfg, ".")
	if err != nil {
		return nil, fmt.Errorf("loading template for inspection: %w", err)
	}

	if packages.PrintErrors(pkgs) > 0 {
		os.Exit(1)
	}

	g.Package = pkgs[0]

	return &g, nil
}

func (g *Generator) Header(f *File) {
	f.HeaderComment("Code generated by '" + g.ThisGenerator + "' generator, DO NOT EDIT.")
	f.ImportAlias(g.PackagePath, "tmpl")
}
